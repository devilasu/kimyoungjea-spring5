<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Properties를 불러오는 스프링빈을 만듭니다. -->
	<bean id="propertyConfigure" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
			<!-- 
				<value>classpath:/properties/oracle.properties</value>
				 -->
				 <value>classpath:/properties/cloud.properties</value>
				
				<!-- <value>classpath:/properties/hsql.properties</value> -->
				
			</list>
		</property>
	</bean>
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 알리아스Alias(별칭) dataSource로 만듭니다. 여러DB와 호환되게 만들기 위해서
	Oracle, Mysql, Hsql 지원 --> 
	<alias name="dataSource-${DbType}" alias="dataSource"/>
	<!-- embeded는 내장형으로서 간단한 용도의 DB구조에 사용. file구조가 아닌 mem구조로 가능 
		초기는 admin/user02입니다.
	-->
	
	<!-- /embeded/hsql_file.db를 자동으로 생성 -->
	<bean id="dataSource-hsql_local" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="${DbUrl}" />
		<property name="username" value="${DbUserName}" />
		<property name="password" value="${DbUserPw}" />
	</bean>
	
	<!-- 위 생성 DB파일에 더미데이터 생성시키는 스크립트 최초1회 -->
	<jdbc:initialize-database data-source="dataSource" ignore-failures="DROPS"> 
		<jdbc:script location="classpath:/db_script/hsql_file.sql" /> 
	</jdbc:initialize-database>

	
	<!-- Hsql데이터베이스 매니저 실행 /embeded/hsql_file.db 자동으로 생성됨-->
 	<bean depends-on="dataSource-hsql_local"
	class="org.springframework.beans.factory.config.MethodInvokingBean">
	<property name="targetClass" value="org.hsqldb.util.DatabaseManagerSwing" />
	<property name="targetMethod" value="main" />
	<property name="arguments">
		<list>
			<value>--url</value>
			<value>${DbUrl}</value>
			<value>--user</value>
			<value>${DbUserName}</value>
			<value>--password</value>
			<value>${DbUserPw}</value>
		</list>
	</property>
	</bean>
 
	
	<!-- 로컬 oracle log4jdbc드라이버 설정 
	<bean id="dataSource-oracle_local" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" 
				  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="url" 
				  value="${DbUrl}"></property>
		<property name="username" value="${DbUserName}"></property>
		<property name="password" value="${DbUserPw}"></property>
	</bean> -->
	
	<!-- 로컬 oracle jdbc 드라이버 설정 -->
	<!-- <bean id="dataSource-oracle_local" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" 
				  value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" 
				  value="jdbc:oracle:thin:@localhost:1521/XE"></property>
		<property name="username" value="XE"></property>
		<property name="password" value="apmsetup"></property>
	</bean> -->
	
	<!-- JDBC빈을 스프링-마이바티스에서 사용 -->
	<!-- 오라클용쿼리와 hsql(mysql)용 쿼리가 틀리기 때문에 아래 쿼리위치 수정 -->
	<!-- SQL세션팩토리클래스를 빈으로 생성: 쿼리를 찍어낼 수 있는 메서드 모음-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">      
       <property name="dataSource" ref="dataSource" />
       <!-- 매퍼 xml로만든 쿼리파일의 경로를 인식하게 함.(아래 classpath경로 src/main/resources/쿼리xml) -->
        <property name="mapperLocations" value="classpath:mappers/**/${QueryType}/*Mapper.xml"></property>
   	</bean>
   	<!-- 위 SQL 세션팩토리를 이용해서 템플릿클래스를 생성(insert(), select(), update(), delete() 등의 메서드를 사용할 수 있는 클래스: 쿼리 접속정보/해제정보를 관리하기때문에 세션이라고 말한다.-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
     <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    </bean>
    
    <!-- 클래스를 스프링빈으로 등록하기 위한 클래스위치 지정  -->
    <context:component-scan base-package="com.edu.dao" />
    <context:component-scan base-package="com.edu.service" />
    <context:component-scan base-package="com.edu.aop" />
    
    <!-- 트랜잭션 설정 -->
    <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
    <!-- 파일업로드 설정 업로드 폴더위치 전역변수로 생성-->
    <bean id="uploadPath" class="java.lang.String">
    <constructor-arg value="${UploadPath}" />
    </bean>
	
</beans>
