<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 알리아스Alias(별칭) dataSource로 만듭니다. 여러DB와 호환되게 만들기 위해서
	Oracle, Mysql, Hsql 지원 --> 
	<alias name="dataSource-oracle_local" alias="dataSource"/>
	<!-- 로컬 HsqlDB용-헤로쿠클라우드 배포용 드라이버 -->
	<!-- <bean id="dataSource_hsql_local"></bean> -->
	
	<!-- 로컬 oracle log4jdbc드라이버 설정 -->
	<bean id="dataSource-oracle_local" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" 
				  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="url" 
				  value="jdbc:log4jdbc:oracle:thin:@localhost:1521/XE"></property>
		<property name="username" value="XE"></property>
		<property name="password" value="apmsetup"></property>
	</bean>
	
	<!-- 로컬 oracle jdbc 드라이버 설정 -->
	<!-- <bean id="dataSource-oracle_local" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" 
				  value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" 
				  value="jdbc:oracle:thin:@localhost:1521/XE"></property>
		<property name="username" value="XE"></property>
		<property name="password" value="apmsetup"></property>
	</bean> -->
	
	<!-- JDBC빈을 스프링-마이바티스에서 사용 -->
	<!-- SQL세션팩토리클래스를 빈으로 생성: 쿼리를 찍어낼 수 있는 메서드 모음-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">      
       <property name="dataSource" ref="dataSource" />
       <!-- 매퍼 xml로만든 쿼리파일의 경로를 인식하게 함.(아래 classpath경로 src/main/resources/쿼리xml) -->
        <property name="mapperLocations" value="classpath:mappers/**/oracle/*Mapper.xml"></property>
   	</bean>
   	<!-- 위 SQL 세션팩토리를 이용해서 템플릿클래스를 생성(insert(), select(), update(), delete() 등의 메서드를 사용할 수 있는 클래스: 쿼리 접속정보/해제정보를 관리하기때문에 세션이라고 말한다.-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
     <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    </bean>
    
    <!-- 클래스를 스프링빈으로 등록하기 위한 클래스위치 지정  -->
    <context:component-scan base-package="com.edu.dao" />
    <context:component-scan base-package="com.edu.service" />
    <context:component-scan base-package="com.edu.aop" />
    
    <!-- aop 프록시 추가. -->
    <aop:aspectj-autoproxy />
    <aop:config />
    
    <!-- 트랜잭션 설정 -->
    <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
    <!-- 파일업로드 설정 업로드 폴더위치 전역변수로 생성-->
    <bean id="uploadPath" class="java.lang.String">
    <constructor-arg value="D:\\study" />
    </bean>
	
</beans>
