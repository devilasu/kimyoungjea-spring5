<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
<!-- url패턴을 사용해서 스프링 시큐리티 필터를 무시하는 경로 추가하기(아래) -->
<security:http pattern="/**/*.js" security="none"></security:http>
<security:http pattern="/**/*.css" security="none"></security:http>
<security:http pattern="/**/img/*" security="none"></security:http>
<!-- 스프링 시큐리티 기본설정인 로그인페이지, 로그아웃 기능 사용하겠다고 명시 spEL언어를 사용가능 -->
<security:http auto-config="true" use-expressions="true">
	<security:session-management invalid-session-url="/">
		<!-- 동일ID의 세션 최대 개수가 3개, 그 이상일 경우 기존 세션 무효화(아래) -->
		<!-- 예를 들면, 노특북에서 로그인 이후 PC에서 로그인하면 노트북은 로그인세션이 사라집니다. -->
		<security:concurrency-control max-sessions="3" error-if-maximum-exceeded="false" />
	</security:session-management>
	<!-- 특정 url 패턴에 해당하는 권한 부여(아래)
		밑에서 위로 해석된다.
	-->
	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/*_write" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="GET"/>
	<security:intercept-url pattern="/**/*_update" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/*_delete" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/member/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**" access="permitAll"/>
	<security:csrf disabled="true"/>
	<!-- 접근허용이 안된 사용자들을 체크해서 로그인 폼으로 이동하게 설정 
		login-processing처리는 jsp로그인폼의 POST방식 /login처리(컨트롤러에서 필요 없음)
	-->
	<security:form-login
		login-page="/login_form"
		login-processing-url="/login"
		default-target-url="/login_success"
		authentication-failure-url="/login_form?msg=fail"
		username-parameter="user_id"
		password-parameter="user_pw"
	/>
	<!-- 토큰: 네트워크에서 자료를 입출력할때 사용하는 자료형태 -->
	<security:remember-me token-validity-seconds="604800" remember-me-parameter="remember-me-parameter"/>
	<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true"
	delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE" />
</security:http>
<!-- 스프링시큐리티나 OAuth2.0 무엇이 되었든, 2개로 구성. Authentication(로그인인증), Authority(권한체크) -->
<security:authentication-manager>
	<security:authentication-provider>
		<security:jdbc-user-service 
			data-source-ref="dataSource"
			users-by-username-query="select user_id as no,user_pw as password, enabled from tbl_member where user_id = ?"
			authorities-by-username-query="select user_id as no,levels as authority from tbl_member where user_id = ?"
		/>
	</security:authentication-provider>
</security:authentication-manager>
</beans>